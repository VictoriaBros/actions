name: build vars
description: build deployment variables
inputs:
  org-name:
    description: the organisation name
    required: true
  service-name:
    description: the service name
    required: true
  ecr-registry:
    description: Amazon ECR registry
    required: true
outputs:
  prod-image-name:
    description: Generic prod image name
    value: ${{ steps.build-vars.outputs.prod-image-name }}
  dev-image-name:
    description: Generic build image name
    value: ${{ steps.build-vars.outputs.dev-image-name }}
  release-image-name:
    description: Generic release image name
    value: ${{ steps.build-vars.outputs.release-image-name }}
  feature-image-name:
    description: Generic feature image name
    value: ${{ steps.build-vars.outputs.feature-image-name }}
  ecr-repository:
    description: Amazon ECR repository
    value: ${{ steps.build-vars.outputs.ecr-repository }}
runs:
  using: composite
  steps:
    - id: build-vars
      shell: bash
      env:
        ECR_REGISTRY: ${{ inputs.ecr-registry }}
        ORG_NAME: ${{ inputs.org-name }}
        SERVICE_NAME: ${{ inputs.service-name }}
        ALPHA_ID: ${{ github.run_number }}
        REF: ${{ github.ref }}
        GIT_SHA: ${{ github.sha }}
      run: |
        # Extract version from package.json (semver format: MAJOR.MINOR.PATCH)
        SOURCE_VERSION=$(awk -F'"' '/"version": ".+"/{ print $4; exit; }' package.json)
        SERVICE_VERSION=v${SOURCE_VERSION}

        ECR_REPOSITORY=${ORG_NAME}/${SERVICE_NAME}
        IMAGE_NAME=${ECR_REGISTRY}/${ECR_REPOSITORY}
        
        # Truncate the full commit SHA to the first 7 characters for the short SHA
        GIT_SHORT_SHA=$(echo $GIT_SHA | cut -c1-7)

        DEV_IMAGE=${IMAGE_NAME}:${GIT_SHORT_SHA}

        # Default to semantic version (MAJOR.MINOR.PATCH)
        IMAGE_TAG=${SERVICE_VERSION}-alpha.${ALPHA_ID}
        PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}

        # Tagging logic for dev branch using short SHA
        if [ "$REF" == "refs/heads/dev" ]; then
          IMAGE_TAG=${SERVICE_VERSION}-${GIT_SHORT_SHA}
          PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}
          DEV_IMAGE=${IMAGE_NAME}:${GIT_SHORT_SHA}

        elif [ "$REF" == "refs/heads/release" ]; then
          IMAGE_TAG=${SERVICE_VERSION}-rel
          RELEASE_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}

        elif [ "$REF" == "refs/heads/feature" ]; then
          IMAGE_TAG=${SERVICE_VERSION}-feat
          FEATURE_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}
        
        elif [ "$REF" == "refs/pull/"* ]; then
          IMAGE_TAG=${SERVICE_VERSION}-${GIT_SHORT_SHA}
          PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}
          DEV_IMAGE=${IMAGE_NAME}:${GIT_SHORT_SHA}

        else [ "$REF" == "refs/heads/main" ]; then
          IMAGE_TAG=${SERVICE_VERSION}  # Pure semver without any suffix
          PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}
        fi

        # Output the final values
        echo "prod-image-name=${PROD_IMAGE}" >> "$GITHUB_OUTPUT"
        echo "dev-image-name=${DEV_IMAGE}" >> "$GITHUB_OUTPUT"
        echo "release-image-name=${RELEASE_IMAGE}" >> "$GITHUB_OUTPUT"
        echo "feature-image-name=${FEATURE_IMAGE}" >> "$GITHUB_OUTPUT"
        echo "ecr-repository=${ECR_REPOSITORY}" >> "$GITHUB_OUTPUT"