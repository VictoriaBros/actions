name: build vars
description: build deployment variables
inputs:
  org-name:
    description: the organisation name
    required: true
  service-name:
    description: the service name
    required: true
  ecr-registry:
    description: Amazon ECR registry
    required: true
outputs:
  prod-image-name:
    description: Amazon ECR build image name
    value: ${{ steps.build-vars.outputs.prod-image-name }}
  dev-image-name:
    description: Generic build image name
    value: ${{ steps.build-vars.outputs.dev-image-name }}
  ecr-repository:
    description: Amazon ECR repository
    value: ${{ steps.build-vars.outputs.ecr-repository }}
runs:
  using: composite
  steps:
    - id: build-vars
      shell: bash
      env:
        ECR_REGISTRY: ${{ inputs.ecr-registry }}
        ORG_NAME: ${{ inputs.org-name }}
        SERVICE_NAME: ${{ inputs.service-name }}
        ALPHA_ID: ${{ github.run_number }}
        REF: ${{ github.ref }}
        GIT_SHA: ${{ github.sha }}

      run: |
        PACKAGE="python-dotenv"
        SOURCE_VERSION=$(awk -F'==' -v package="$PACKAGE" '
          {
            # Debug: Print each line to check the content
            print "Checking line:", $0;
            # Match the package name exactly
            if ($1 == package) {
              # Debug: Print the matched package and version
              print "Match found for", package, "with version:", $2;
              # Output the version and exit
              print $2; exit;
            }
          }' requirements.txt | tr -d '\r')

        echo "Extracted version: $SOURCE_VERSION"

        # Define the service version with the extracted version number
        SERVICE_VERSION_NUMBER=v${SOURCE_VERSION}
        echo "Service version number: $SERVICE_VERSION_NUMBER"

        # Truncate the full commit SHA to the first 7 characters for the short SHA
        GIT_SHORT_SHA=$(echo $GIT_SHA | cut -c1-7)

        ECR_REPOSITORY=${ORG_NAME}/${SERVICE_NAME}
        IMAGE_TAG=${SERVICE_VERSION_NUMBER}-alpha.${ALPHA_ID}
        IMAGE_NAME=${ECR_REGISTRY}/${ECR_REPOSITORY}

        DEV_IMAGE=${IMAGE_NAME}:${GIT_SHORT_SHA}
        PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}

        if [ "$REF" == "refs/heads/dev" ]; then
          IMAGE_TAG=${SERVICE_VERSION_NUMBER}-${GIT_SHORT_SHA}
          PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}
          DEV_IMAGE=${IMAGE_NAME}:${GIT_SHORT_SHA}
        fi

        if [ "$REF" == "refs/heads/release" ]; then
          IMAGE_TAG=${SERVICE_VERSION_NUMBER}-rc
          PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}
        fi

        if [ "$REF" == "refs/heads/main" ]; then
          IMAGE_TAG=${SERVICE_VERSION_NUMBER}
          PROD_IMAGE=${IMAGE_NAME}:${IMAGE_TAG}
        fi

        echo "prod-image-name=${PROD_IMAGE}" >> "$GITHUB_OUTPUT"
        echo "dev-image-name=${DEV_IMAGE}" >> "$GITHUB_OUTPUT"
        echo "ecr-repository=${ECR_REPOSITORY}" >> "$GITHUB_OUTPUT"